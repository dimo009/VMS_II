namespace Vulnerabilities.Services.Implementations
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Vulnerabilites.Data.Context;
    using Vulnerabilities.Services.Contracts;
    using Vulnerabilities.Services.Models.MPCconfigModels;
    using Vulnerabilities.Services.Models.MPCpatchModels;
    using Vulnerabilities.Services.Models.StandardEnvironment;
    using System.Reflection;
    using Vulnerabilities.DataManagement;
    using System.Globalization;
    using Microsoft.EntityFrameworkCore;
    using System.Collections;

    public class VulnerabilityService : IVulnerabilityService
    {
        private readonly VulnerabilityDBContext db;
        private readonly MpcDBContext mpcConfigDB;
        private readonly MPCMissingPatchDbContext mpcPatchDB;
        
        private readonly int currentYear = DateTime.Now.Year;
        private readonly int currentMonth = DateTime.Now.Day <= 26 ? DateTime.Now.AddMonths(-1).Month : DateTime.Now.Month;

        public VulnerabilityService(VulnerabilityDBContext db, MpcDBContext mpcConfigDB, MPCMissingPatchDbContext mpcPatchDB)
        {
            this.db = db;
            this.mpcConfigDB = mpcConfigDB;
            this.mpcPatchDB = mpcPatchDB;
        }

        

        public void AddNote(int id,string name, string note)
        {
            var vulnerability = this.db.Vulnerabilities.FirstOrDefault(v => v.Id == id);

            if (vulnerability==null)
            {
                return;
            }

            vulnerability.Name = name;
            vulnerability.Notes = note;

            this.db.SaveChanges();
        }
        public void AddNoteMpcConfig(int id, string name, string note)
        {
            var vulnerability = this.mpcConfigDB.Vulnerabilities.FirstOrDefault(v => v.Id == id);

            if (vulnerability == null)
            {
                return;
            }

            vulnerability.Name = name;
            vulnerability.Notes = note;

            this.mpcConfigDB.SaveChanges();
        }
        public void AddNoteMpcPatch(int id, string name, string note)
        {
            var vulnerability = this.mpcPatchDB.Vulnerabilities.FirstOrDefault(v => v.Id == id);

            if (vulnerability == null)
            {
                return;
            }

            vulnerability.Name = name;
            vulnerability.Notes = note;

            this.mpcPatchDB.SaveChanges();
        }


        public VulnerabilityEditNote AddNoteById(int? id)
        {
            var vulnerability = this.db.Vulnerabilities.Where(v => v.Id == id).Select(v => new VulnerabilityEditNote
            {

                Name = v.Name,
                Notes = v.Notes
               
            }).FirstOrDefault();

            return vulnerability;
        }
        public VulnerabilityEditNoteMpcConfig AddNoteByIdMpcConfig(int? id)
        {
            var vulnerability = this.mpcConfigDB.Vulnerabilities.Where(v => v.Id == id).Select(v => new VulnerabilityEditNoteMpcConfig
            {

                Name = v.Name,
                Notes = v.Notes

            }).FirstOrDefault();

            return vulnerability;
        }
        public VulnerabilityEditNoteMpcPatch AddNoteByIdMpcPatch(int? id)
        {
            var vulnerability = this.mpcPatchDB.Vulnerabilities.Where(v => v.Id == id).Select(v => new VulnerabilityEditNoteMpcPatch
            {

                Name = v.Name,
                Notes = v.Notes

            }).FirstOrDefault();

            return vulnerability;
        }


        public IEnumerable<VulnerabilityListingModel> AllVulnerabilities()
        {
           

            var result = this.db.Vulnerabilities
                .OrderByDescending(v => v.LastDetected.Year)
                .ThenBy(v => v.LastDetected.Month)
                .Where(v => v.Servers.Any(s => s.Server.LastDetected.Year == currentYear &&
                s.Server.LastDetected.Month == currentMonth))
                .Select(v => new VulnerabilityListingModel
                {
                    Id = v.Id,
                    Name = v.Name,
                    Severity = v.Severity,
                    CVE = v.CVE,
                    Solution = v.Solution,
                    QID = v.QID,
                    Notes = v.Notes,
                    AffectedServersCount = v.Servers.Where(s => s.Server.LastDetected.Year == currentYear && s.Server.LastDetected.Month == currentMonth).Count()

                }).ToList();

            return result;
        }

       

        public IEnumerable<VulnerabilityListingModelMpcConfig> AllVulnerabilitiesMpcConfig()
        {
            //int currentMonth = 9;

            var result = this.mpcConfigDB.Vulnerabilities
                .OrderByDescending(v=>v.LastDetected.Year).ThenBy(v=>v.LastDetected.Month)
                .Where(v => v.Servers.Any(s => s.Server.LastDetected.Year == currentYear &&
                s.Server.LastDetected.Month == currentMonth))
                .Select(v => new VulnerabilityListingModelMpcConfig
            {
                Id = v.Id,
                Name = v.Name,
                Severity = v.Severity,
                CVE = v.CVE,
                Solution = v.Solution,
                QID = v.QID,
                Notes = v.Notes,
                AffectedServersCount = v.Servers.Where(s => s.Server.LastDetected.Year == currentYear && s.Server.LastDetected.Month == currentMonth).Count()

                }).ToList();

            return result;
        }
        public IEnumerable<VulnerabilityListingModelMpcPatch> AllVulnerabilitiesMpcPatch()
        {
            //int currentMonth = 9;

            var result = this.mpcPatchDB.Vulnerabilities
                .OrderByDescending(v => v.LastDetected.Year).ThenBy(v => v.LastDetected.Month)
                .Where(v => v.Servers.Any(s => s.Server.LastDetected.Year == currentYear &&
                s.Server.LastDetected.Month == currentMonth))
                .Select(v => new VulnerabilityListingModelMpcPatch
            {
                Id = v.Id,
                Name = v.Name,
                Severity = v.Severity,
                CVE = v.CVE,
                Solution = v.Solution,
                QID = v.QID,
                Notes = v.Notes,
                AffectedServersCount = v.Servers.Where(s => s.Server.LastDetected.Year == currentYear && s.Server.LastDetected.Month == currentMonth).Count()

            }).ToList();

            return result;
        }


        public VulnerabilityDetailsModel FindVulnerabilityById(int? id)
        {
            //int currentMonth = 9;

            var vulnerability = this.db.Vulnerabilities.Where(v => v.Id == id).Select(v => new VulnerabilityDetailsModel
            {
                Id = v.Id,
                Name = v.Name,
                Severity = v.Severity,
                LastDetected = v.LastDetected,
                CVE = v.CVE,
                QID = v.QID,
                Solution = v.Solution,
                Notes = v.Notes,
                AffectedServersCount = v.Servers.Where(s => s.Server.LastDetected.Year == currentYear && s.Server.LastDetected.Month == currentMonth).Count()

            })
            .FirstOrDefault();

            return vulnerability;
        }
        public VulnerabilityDetailsModelMpcConfig FindVulnerabilityByIdMpcConfig(int? id)
        {
            //int currentMonth = 9;

            var vulnerability = this.mpcConfigDB.Vulnerabilities.Where(v => v.Id == id).Select(v => new VulnerabilityDetailsModelMpcConfig
            {
                Id = v.Id,
                Name = v.Name,
                Severity = v.Severity,
                LastDetected = v.LastDetected,
                CVE = v.CVE,
                QID = v.QID,
                Solution = v.Solution,
                Notes = v.Notes,
                AffectedServersCount = v.Servers.Where(s => s.Server.LastDetected.Year == currentYear && s.Server.LastDetected.Month == currentMonth).Count()

            })
            .FirstOrDefault();

            return vulnerability;
        }
        public VulnerabilityDetailsModelMpcPatch FindVulnerabilityByIdMpcPatch(int? id)
        {
            //int currentMonth = 9;

            var vulnerability = this.mpcPatchDB.Vulnerabilities.Where(v => v.Id == id).Select(v => new VulnerabilityDetailsModelMpcPatch
            {
                Id = v.Id,
                Name = v.Name,
                Severity = v.Severity,
                LastDetected = v.LastDetected,
                CVE = v.CVE,
                QID = v.QID,
                Solution = v.Solution,
                Notes = v.Notes,
                AffectedServersCount = v.Servers.Where(s=>s.Server.LastDetected.Year==currentYear && s.Server.LastDetected.Month==currentMonth).Count()

            })
            .FirstOrDefault();

            return vulnerability;
        }

        public bool Exists(int id) => this.db.Vulnerabilities.Any(v => v.Id == id);
        public bool ExistsMpcConfig(int id) => this.mpcConfigDB.Vulnerabilities.Any(v => v.Id == id);
        public bool ExistsMpcPatch(int id) => this.mpcPatchDB.Vulnerabilities.Any(v => v.Id == id);




        private int CountOfAffectedServers(int? id, int month, int year)
        {
            
            var result = this.db.Servers
               .Where(s => s.Vulnerabilities.Any(v => v.VulnerabilityId == id))
               .Where(s => s.LastDetected.Year == year && s.LastDetected.Month == month)
               .Count();

            return result;

        }
        private int CountOfAffectedServersMpcConfig(int? id)
        {
            return this.mpcConfigDB.Vulnerabilities.FirstOrDefault(v => v.Id == id).Servers.Count();
        }

        private int CountOfAffectedServersMpcPatch(int id)
        {
            return this.mpcPatchDB.Vulnerabilities.FirstOrDefault(v => v.Id == id).Servers.Count();
        }

        public Dictionary<string, int> AffectedServersCountPerMonth(int? id)
        {
            //creating and array containing all months
            int[] months = new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };
            //finding the index of the current month
            int monthIndex = Array.IndexOf(months, currentMonth);
            int numberOfiterations = 6;
            int lastMonth = 12;
            int previousYear = currentYear - 1;
        DateTimeFormatInfo mfi = new DateTimeFormatInfo();

            var dict = new Dictionary<string, int>();
            if (monthIndex<=5)
            {
                while (monthIndex>0)
                {
                    var countAffectedServers = this.CountOfAffectedServers(id, monthIndex, currentYear);
                    dict.Add(mfi.GetMonthName(monthIndex), countAffectedServers);
                    numberOfiterations--;
                    monthIndex--;
                    
                }

                while (numberOfiterations>0)
                {
                    var countAffectedServers = this.CountOfAffectedServers(id, lastMonth, previousYear);
                    dict.Add(mfi.GetMonthName(lastMonth), countAffectedServers);
                    numberOfiterations--;
                    lastMonth--;
                }
            }
            else
            {
                for (int i = currentMonth; i >= currentMonth - 5; i--)
                {

                    var countAffectedServers = this.CountOfAffectedServers(id, i, currentYear);

                    dict.Add(mfi.GetMonthName(i), countAffectedServers);
                }
            }

 

            return dict;
        }

        
    }
}
