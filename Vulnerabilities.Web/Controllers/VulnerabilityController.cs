
namespace Vulnerabilities.Web.Controllers
{
    using Microsoft.AspNetCore.Mvc;
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.Linq;
    using System.Runtime.InteropServices;
    using Vulnerabilites.Data.Context;
    using Vulnerabilities.Services.Contracts;
    using Vulnerabilities.Web.Models.Charts;
    using Vulnerabilities.Web.Models.Vulnerabilities.MPCconfigVulnerabilities;
    using Vulnerabilities.Web.Models.Vulnerabilities.MPCpatchVulnerabilities;
    using Vulnerabilities.Web.Models.Vulnerabilities.StandardEnvironmentVulnerabilities;

    [Route("vulnerabilities")]
    public class VulnerabilityController:Controller
    {
        private readonly IVulnerabilityService vulnerabilities;
        private readonly VulnerabilityDBContext db;
        private readonly MpcDBContext mpcConfigDB;
        private readonly MPCMissingPatchDbContext mpcPatchDB;
        //private readonly int currentMonth = DateTime.Now.Day <= 26 ? DateTime.Now.Month - 1 : DateTime.Now.Month;
        private readonly int currentMonth = DateTime.Now.Day <= 26 ? DateTime.Now.AddMonths(-1).Month : DateTime.Now.Month;


        public VulnerabilityController(IVulnerabilityService vulnerabilities, VulnerabilityDBContext db, MpcDBContext mpcConfigDB, MPCMissingPatchDbContext mpcPatchDB)
        {
            this.vulnerabilities = vulnerabilities;
            this.db = db;
            this.mpcConfigDB = mpcConfigDB;
            this.mpcPatchDB = mpcPatchDB;
        }

        [HttpGet]
        [Route(nameof(AllVulnerabilities))]
        public IActionResult AllVulnerabilities()
        {
            return View(new VulnerabilitiesListingViewModel
            {
                AllVulnerabilities = this.vulnerabilities.AllVulnerabilities()
            });

        }

        [HttpGet]
        [Route(nameof(AllVulnerabilitiesMpcConfig))]
        public IActionResult AllVulnerabilitiesMpcConfig()
        {
            return View(new VulnerabilitiesListingViewModelMpcConfig
            {
                AllVulnerabilitiesMpcConfig = this.vulnerabilities.AllVulnerabilitiesMpcConfig()
            });

        }

        [HttpGet]
        [Route(nameof(AllVulnerabilitiesMpcPatch))]
        public IActionResult AllVulnerabilitiesMpcPatch()
        {
            return View(new VulnerabilitiesListingViewModelMpcPatch
            {
                AllVulnerabilitiesMpcPatch = this.vulnerabilities.AllVulnerabilitiesMpcPatch()
            });

        }


        [HttpGet]
        [Route(nameof(SeverityFive))]
        public IActionResult SeverityFive()
        {
            return View(new VulnerabilitiesListingViewModel
            {
                AllVulnerabilities = this.vulnerabilities.AllVulnerabilities().Where(v => v.Severity == "5")
            });

        }

        [HttpGet]
        [Route(nameof(SeverityFiveMpcConfig))]
        public IActionResult SeverityFiveMpcConfig()
        {
            return View(new VulnerabilitiesListingViewModelMpcConfig
            {
                AllVulnerabilitiesMpcConfig = this.vulnerabilities.AllVulnerabilitiesMpcConfig().Where(v => v.Severity == "5")
            });

        }

        [HttpGet]
        [Route(nameof(SeverityFiveMpcPatch))]
        public IActionResult SeverityFiveMpcPatch()
        {
            return View(new VulnerabilitiesListingViewModelMpcPatch
            {
                AllVulnerabilitiesMpcPatch = this.vulnerabilities.AllVulnerabilitiesMpcPatch().Where(v => v.Severity == "5")
            });

        }


        [HttpGet]
        [Route(nameof(SeverityFour))]
        public IActionResult SeverityFour()
        {
            return View(new VulnerabilitiesListingViewModel
            {
                AllVulnerabilities = this.vulnerabilities.AllVulnerabilities().Where(v => v.Severity == "4")
            });

        }

        [HttpGet]
        [Route(nameof(SeverityFourMpcConfig))]
        public IActionResult SeverityFourMpcConfig()
        {
            return View(new VulnerabilitiesListingViewModelMpcConfig
            {
                AllVulnerabilitiesMpcConfig = this.vulnerabilities.AllVulnerabilitiesMpcConfig().Where(v => v.Severity == "4")
            });

        }

        [HttpGet]
        [Route(nameof(SeverityFourMpcPatch))]
        public IActionResult SeverityFourMpcPatch()
        {
            return View(new VulnerabilitiesListingViewModelMpcPatch
            {
                AllVulnerabilitiesMpcPatch = this.vulnerabilities.AllVulnerabilitiesMpcPatch().Where(v => v.Severity == "4")
            });

        }



        [HttpGet]
        [Route(nameof(EditNote) + "/id")]
        public IActionResult EditNote(int? id)
        {
            var vulnerability = this.vulnerabilities.AddNoteById(id);

            if (vulnerability==null)
            {
                return NotFound();
            }

            return View(new VulnerabilityEditNoteViewModel
            {
                Name = vulnerability.Name,
                Notes = vulnerability.Notes
            });
        }

        [HttpGet]
        [Route(nameof(EditNoteMpcConfig) + "/id")]
        public IActionResult EditNoteMpcConfig(int? id)
        {
            var vulnerability = this.vulnerabilities.AddNoteByIdMpcConfig(id);

            if (vulnerability == null)
            {
                return NotFound();
            }

            return View(new VulnerabilityEditNoteViewModelMpcConfig
            {
                Name = vulnerability.Name,
                Notes = vulnerability.Notes
            });
        }

        [HttpGet]
        [Route(nameof(EditNoteMpcPatch) + "/id")]
        public IActionResult EditNoteMpcPatch(int? id)
        {
            var vulnerability = this.vulnerabilities.AddNoteByIdMpcPatch(id);

            if (vulnerability == null)
            {
                return NotFound();
            }

            return View(new VulnerabilityEditNoteViewModelMpcPatch
            {
                Name = vulnerability.Name,
                Notes = vulnerability.Notes
            });
        }



        [HttpPost]
        [ValidateAntiForgeryToken]
        [Route(nameof(EditNote) + "/id")]
        public IActionResult EditNote(int id, VulnerabilityEditNoteViewModel model)
        {
            if (!ModelState.IsValid)
            {
                return View(model);
            }

            var vulnerabilityExists = this.vulnerabilities.Exists(id);

            if (!vulnerabilityExists)
            {
                return NotFound();
            }

            this.vulnerabilities.AddNote(model.Id,model.Name, model.Notes);

            var vulnerability = this.vulnerabilities.FindVulnerabilityById(id);

            if (vulnerability.Severity=="5")
            {
                return RedirectToAction(nameof(SeverityFive));
            }
            return RedirectToAction(nameof(SeverityFour));
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        [Route(nameof(EditNoteMpcConfig) + "/id")]
        public IActionResult EditNoteMpcConfig(int id, VulnerabilityEditNoteViewModelMpcConfig model)
        {
            if (!ModelState.IsValid)
            {
                return View(model);
            }

            var vulnerabilityExists = this.vulnerabilities.ExistsMpcConfig(id);

            if (!vulnerabilityExists)
            {
                return NotFound();
            }

            this.vulnerabilities.AddNoteMpcConfig(model.Id, model.Name, model.Notes);

            var vulnerability = this.vulnerabilities.FindVulnerabilityByIdMpcConfig(id);
            if (vulnerability.Severity=="5")
            {
                return RedirectToAction(nameof(SeverityFiveMpcConfig));
            }

            return RedirectToAction(nameof(SeverityFourMpcConfig));
            
            
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        [Route(nameof(EditNoteMpcPatch) + "/id")]
        public IActionResult EditNoteMpcPatch(int id, VulnerabilityEditNoteViewModelMpcPatch model)
        {
            if (!ModelState.IsValid)
            {
                return View(model);
            }

            var vulnerabilityExists = this.vulnerabilities.ExistsMpcPatch(id);

            if (!vulnerabilityExists)
            {
                return NotFound();
            }

            this.vulnerabilities.AddNoteMpcPatch(model.Id, model.Name, model.Notes);

            var vulnerability = this.vulnerabilities.FindVulnerabilityByIdMpcPatch(id);

            if (vulnerability.Severity == "5")
            {
                return RedirectToAction(nameof(SeverityFiveMpcPatch));
            }

            return RedirectToAction(nameof(SeverityFourMpcPatch));

            
        }


        [HttpGet]
        [Route(nameof(VulnerabilityDetails) + "/id")]
        public IActionResult VulnerabilityDetails(int? id)
        {

            List<DataPoint> dataPoints = new List<DataPoint>();

            var vulnerability = this.vulnerabilities.FindVulnerabilityById(id);

            Dictionary <string,int> values = this.vulnerabilities.AffectedServersCountPerMonth(id);

           

            int[] monthlyStats = new int[6];

            foreach (var item in values)
            {

                ViewData.Add(new KeyValuePair<string, object>(item.Key, item.Value));
            }

            for (int i = 0; i < values.Count; i++)
            {
                monthlyStats[i] = values.Values.ElementAt(i);
            }

            ViewBag.stats = monthlyStats;

            foreach (var item in values)
            {
                dataPoints.Add(new DataPoint(item.Key, item.Value));
            }

           

            if (vulnerability==null)
            {
                return NotFound();
            }

            return View(new VulnerabilityDetailsViewModel
            {
                Id = vulnerability.Id,
                Name = vulnerability.Name,
                Severity = vulnerability.Severity,
                CVE = vulnerability.CVE,
                QID = vulnerability.QID,
                AffectedServersCount = vulnerability.AffectedServersCount,
                Solution = vulnerability.Solution,
                Notes = vulnerability.Notes

            });
        }

        [HttpGet]
        [Route(nameof(VulnerabilityDetailsMpcConfig) + "/id")]
        public IActionResult VulnerabilityDetailsMpcConfig(int? id)
        {
            var vulnerability = this.vulnerabilities.FindVulnerabilityByIdMpcConfig(id);

            if (vulnerability == null)
            {
                return NotFound();
            }

            return View(new VulnerabilityDetailsViewModelMpcConfig
            {
                Id = vulnerability.Id,
                Name = vulnerability.Name,
                Severity = vulnerability.Severity,
                CVE = vulnerability.CVE,
                QID = vulnerability.QID,
                AffectedServersCount = vulnerability.AffectedServersCount,
                Solution = vulnerability.Solution,
                Notes = vulnerability.Notes

            });
        }

        [HttpGet]
        [Route(nameof(VulnerabilityDetailsMpcPatch) + "/id")]
        public IActionResult VulnerabilityDetailsMpcPatch(int? id)
        {
            var vulnerability = this.vulnerabilities.FindVulnerabilityByIdMpcPatch(id);

            if (vulnerability == null)
            {
                return NotFound();
            }

            return View(new VulnerabilityDetailsViewModelMpcPatch
            {
                Id = vulnerability.Id,
                Name = vulnerability.Name,
                Severity = vulnerability.Severity,
                CVE = vulnerability.CVE,
                QID = vulnerability.QID,
                AffectedServersCount = vulnerability.AffectedServersCount,
                Solution = vulnerability.Solution,
                Notes = vulnerability.Notes

            });
        }

    }
}
